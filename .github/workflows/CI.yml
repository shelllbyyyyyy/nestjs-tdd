name: CI Workflows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

  integration_test:
    needs: unit_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        run: sudo apt-get install docker-compose

      - name: Create .env.production file
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env.production
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.production
          echo "DB_REDIS_HOST=${{ secrets.DB_REDIS_HOST }}" >> .env.production
          echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> .env.production
          echo "DB_REDIS_PORT=${{ secrets.DB_REDIS_PORT }}" >> .env.production
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env.production
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env.production

      - name: Build and start the containers
        run: |
          docker-compose -f docker-compose.yml up -d --build

      - name: Wait for the application to be ready
        run: |
          until curl --output /dev/null --silent --head --fail http://localhost:${{ secrets.PORT }}; do
            echo 'Waiting for the application to be ready...'
            sleep 3
          done

      - name: Get PostgreSQL container ID
        id: postgres_container_id
        run: echo "::set-output name=POSTGRES_CONTAINER_ID::$(docker-compose ps -q postgres)"

      - name: Initialize PostgreSQL with SQL script
        run: docker exec ${{ steps.postgres_container_id.outputs.POSTGRES_CONTAINER_ID }} postgress-tdd -U user -d tdd -f /script/init.sql

      - name: Run integration tests
        run: docker-compose -f docker-compose.yml exec app npm run test:e2e

      - name: Shut down Docker containers
        run: docker-compose -f docker-compose.yml down

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build
